//Given a string input of length n, find the length of the longest substring without repeating characters i.e return a substring that does not have any repeating characters.
//Solution is using hashmap map.For a substring to be unique its size should be equal to current size of hash map.
import java.util.* ;
import java.io.*; 

public class Solution 
{
	public static int uniqueSubstrings(String input) 
    {
        HashMap<Character,Integer> m =new HashMap<>();
        int i=0,j=0;
        int max=Integer.MIN_VALUE;
        char[] a=input.toCharArray();
        while(j<input.length())
        {
            m.put(a[j],m.getOrDefault(a[j],0)+1);
            if(m.size()==j-i+1)
            {
                if(max<j-i+1)
                {
                    max=j-i+1;
                }
            }
            else if(m.size()<j-i+1)
            {
                while(m.size()<j-i+1)
                {
                    m.put(a[i],m.getOrDefault(a[i],0)-1);
                    if(m.get(a[i])==0)
                    m.remove(a[i]);                        
                    i++;
                   
                }
            }
            j++;
        }
        return max;
           
		//write your code here
	}
}
